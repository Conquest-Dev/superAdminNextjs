// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5Wyypaj28HpFwgqusnxkCW
// Component: aG693ljhigII

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Button from "../../Button"; // plasmic-import: B_22a0ZpxEGl/component
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5Wyypaj28HpFwgqusnxkCW/projectcss
import sty from "./PlasmicPageLayout.module.css"; // plasmic-import: aG693ljhigII/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: YdM3wmahHV_n/icon
import NotificationBellSvgrepoComSvgIcon from "./icons/PlasmicIcon__NotificationBellSvgrepoComSvg"; // plasmic-import: zNPk2w6cdzkE/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: d4JfcPdBvm6f/icon

createPlasmicElementProxy;

export type PlasmicPageLayout__VariantMembers = {};
export type PlasmicPageLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicPageLayout__VariantsArgs;
export const PlasmicPageLayout__VariantProps = new Array<VariantPropType>();

export type PlasmicPageLayout__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPageLayout__ArgsType;
export const PlasmicPageLayout__ArgProps = new Array<ArgPropType>("children");

export type PlasmicPageLayout__OverridesType = {
  root?: Flex__<typeof RichLayout>;
  img?: Flex__<typeof PlasmicImg__>;
  navigationBar?: Flex__<typeof NavigationBar>;
  button?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  loadingBoundary?: Flex__<typeof LoadingBoundary>;
  pageSection?: Flex__<"section">;
};

export interface DefaultPageLayoutProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPageLayout__RenderFunc(props: {
  variants: PlasmicPageLayout__VariantsArgs;
  args: PlasmicPageLayout__ArgsType;
  overrides: PlasmicPageLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isCollapsed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <RichLayout
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      fixSiderbar={false}
      layout={"side"}
      logoElement={
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          src={"https://static1.plasmic.app/fake-logo.svg"}
        />
      }
      menu={(() => {
        const __composite = {
          defaultOpenAll: null,
          hideMenuWhenCollapsed: null
        };
        __composite["defaultOpenAll"] = false;
        __composite["hideMenuWhenCollapsed"] = true;
        return __composite;
      })()}
      navMenuItems={(() => {
        const __composite = [
          { path: null, name: null },
          { path: null, name: null },
          { path: null, name: null },
          { name: null, path: null },
          { name: null },
          { name: null },
          { name: null },
          { name: null },
          { name: null },
          { name: null },
          { name: null },
          { path: null, name: null }
        ];
        __composite["0"]["path"] = `/Dashboard`;
        __composite["0"]["name"] = "Dashboard";
        __composite["1"]["path"] = `/machine-types`;
        __composite["1"]["name"] = "Device Types";
        __composite["2"]["path"] = `/machines-categories`;
        __composite["2"]["name"] = "Device Categories";
        __composite["3"]["name"] = "Devices";
        __composite["3"]["path"] = "";
        __composite["4"]["name"] = "Firmware Management";
        __composite["5"]["name"] = "OEM";
        __composite["6"]["name"] = "User Management";
        __composite["7"]["name"] = "Subscription";
        __composite["8"]["name"] = "Logs";
        __composite["9"]["name"] = "Reports";
        __composite["10"]["name"] = "Settings";
        __composite["11"]["path"] = "";
        __composite["11"]["name"] = "Module";
        return __composite;
      })()}
      simpleNavTheme={(() => {
        const __composite = { scheme: null, customBgColor: null };
        __composite["scheme"] = "custom";
        __composite["customBgColor"] = "#11274B";
        return __composite;
      })()}
      title={"Super Admin"}
    >
      <NavigationBar
        data-plasmic-name={"navigationBar"}
        data-plasmic-override={overrides.navigationBar}
        brand={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fwGEy
            )}
          >
            {"Company Name"}
          </div>
        }
        className={classNames("__wab_instance", sty.navigationBar)}
        closeButton={null}
        itemsGap={10}
        menuItems={
          <div className={classNames(projectcss.all, sty.freeBox___6WJyS)}>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"clear"}
            >
              <NotificationBellSvgrepoComSvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </Button>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f52TU
              )}
            >
              {"Username"}
            </div>
          </div>
        }
        openButton={null}
        responsiveBreakpoint={768}
      />

      <LoadingBoundary
        data-plasmic-name={"loadingBoundary"}
        data-plasmic-override={overrides.loadingBoundary}
        className={classNames("__wab_instance", sty.loadingBoundary)}
        loadingState={
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox___42NBq)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lbKvw
                  )}
                >
                  {"Loading..."}
                </div>
              </div>
            )}
          </DataCtxReader__>
        }
      >
        <DataCtxReader__>
          {$ctx => (
            <section
              data-plasmic-name={"pageSection"}
              data-plasmic-override={overrides.pageSection}
              className={classNames(projectcss.all, sty.pageSection)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <section
                    className={classNames(projectcss.all, sty.section___7IhRj)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__kRiVx
                      )}
                    >
                      {"Title"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ex61
                      )}
                    >
                      {"Content"}
                    </div>
                  </section>
                ),
                value: args.children
              })}
            </section>
          )}
        </DataCtxReader__>
      </LoadingBoundary>
    </RichLayout>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "navigationBar",
    "button",
    "svg",
    "loadingBoundary",
    "pageSection"
  ],
  img: ["img"],
  navigationBar: ["navigationBar", "button", "svg"],
  button: ["button", "svg"],
  svg: ["svg"],
  loadingBoundary: ["loadingBoundary", "pageSection"],
  pageSection: ["pageSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof RichLayout;
  img: typeof PlasmicImg__;
  navigationBar: typeof NavigationBar;
  button: typeof Button;
  svg: "svg";
  loadingBoundary: typeof LoadingBoundary;
  pageSection: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageLayout__VariantsArgs;
    args?: PlasmicPageLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPageLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPageLayout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageLayout__ArgProps,
          internalVariantPropNames: PlasmicPageLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageLayout";
  } else {
    func.displayName = `PlasmicPageLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicPageLayout = Object.assign(
  // Top-level PlasmicPageLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    navigationBar: makeNodeComponent("navigationBar"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    pageSection: makeNodeComponent("pageSection"),

    // Metadata about props expected for PlasmicPageLayout
    internalVariantProps: PlasmicPageLayout__VariantProps,
    internalArgProps: PlasmicPageLayout__ArgProps
  }
);

export default PlasmicPageLayout;
/* prettier-ignore-end */
